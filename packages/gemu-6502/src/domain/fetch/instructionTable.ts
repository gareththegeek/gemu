import Instruction from '../Instruction'
import buildInstruction from './buildInstruction'

const INSTRUCTION_TABLE: { [opcode: number]: Instruction } = {
    0x00: buildInstruction(0x00, 'BRK', 'Implied', 1, 7),
    0x01: buildInstruction(0x01, 'ORA', '(IND,X)', 2, 6),
    0x05: buildInstruction(0x05, 'ORA', 'ZP', 2, 3),
    0x06: buildInstruction(0x06, 'ASL', 'ZP', 2, 5),
    0x08: buildInstruction(0x08, 'PHP', 'Implied', 1, 3),
    0x09: buildInstruction(0x09, 'ORA', 'IMM', 2, 2),
    0x0a: buildInstruction(0x0a, 'ASL', 'Accum', 1, 2),
    0x0d: buildInstruction(0x0d, 'ORA', 'ABS', 3, 4),
    0x0e: buildInstruction(0x0e, 'ASL', 'ABS', 3, 6),
    0x10: buildInstruction(0x10, 'BPL', 'Relative', 2, 2),
    0x11: buildInstruction(0x11, 'ORA', '(IND),Y', 2, 5, true),
    0x15: buildInstruction(0x15, 'ORA', 'ZP,X', 2, 4),
    0x16: buildInstruction(0x16, 'ASL', 'ZP,X', 2, 6),
    0x18: buildInstruction(0x18, 'CLC', 'Implied', 1, 2),
    0x19: buildInstruction(0x19, 'ORA', 'ABS,Y', 3, 4, true),
    0x1d: buildInstruction(0x1d, 'ORA', 'ABS,X', 3, 4, true),
    0x1e: buildInstruction(0x1e, 'ASL', 'ABS,X', 3, 7),
    0x20: buildInstruction(0x20, 'JSR', 'Absolute', 3, 6),
    0x21: buildInstruction(0x21, 'AND', '(IND,X)', 2, 6),
    0x24: buildInstruction(0x24, 'BIT', 'ZP', 2, 3),
    0x25: buildInstruction(0x25, 'AND', 'ZP', 2, 3),
    0x26: buildInstruction(0x26, 'ROL', 'ZP', 2, 5),
    0x28: buildInstruction(0x28, 'PLP', 'Implied', 1, 4),
    0x29: buildInstruction(0x29, 'AND', 'IMM', 2, 2),
    0x2a: buildInstruction(0x2a, 'ROL', 'Accum', 1, 2),
    0x2c: buildInstruction(0x2c, 'BIT', 'ABS', 3, 4),
    0x2d: buildInstruction(0x2d, 'AND', 'ABS', 3, 4),
    0x2e: buildInstruction(0x2e, 'ROL', 'ABS', 3, 6),
    0x30: buildInstruction(0x30, 'BMI', 'Relative', 2, 2),
    0x31: buildInstruction(0x31, 'AND', '(IND),Y', 2, 5, true),
    0x35: buildInstruction(0x35, 'AND', 'ZP,X', 2, 4),
    0x36: buildInstruction(0x36, 'ROL', 'ZP,X', 2, 6),
    0x38: buildInstruction(0x38, 'SEC', 'Implied', 1, 2),
    0x39: buildInstruction(0x39, 'AND', 'ABS,Y', 3, 4, true),
    0x3d: buildInstruction(0x3d, 'AND', 'ABS,X', 3, 4, true),
    0x3e: buildInstruction(0x3e, 'ROL', 'ABS,X', 3, 7),
    0x40: buildInstruction(0x40, 'RTI', 'Implied', 1, 6),
    0x41: buildInstruction(0x41, 'EOR', '(IND,X)', 2, 6),
    0x45: buildInstruction(0x45, 'EOR', 'ZP', 2, 3),
    0x46: buildInstruction(0x46, 'LSR', 'ZP', 2, 5),
    0x48: buildInstruction(0x48, 'PHA', 'Implied', 1, 3),
    0x49: buildInstruction(0x49, 'EOR', 'IMM', 2, 2),
    0x4a: buildInstruction(0x4a, 'LSR', 'Accum', 1, 2),
    0x4c: buildInstruction(0x4c, 'JMP', 'ABS', 3, 3),
    0x4d: buildInstruction(0x4d, 'EOR', 'ABS', 3, 4),
    0x4e: buildInstruction(0x4e, 'LSR', 'ABS', 3, 6),
    0x50: buildInstruction(0x50, 'BVC', 'Relative', 2, 2),
    0x51: buildInstruction(0x51, 'EOR', '(IND),Y', 2, 5, true),
    0x55: buildInstruction(0x55, 'EOR', 'ZP,X', 2, 4),
    0x56: buildInstruction(0x56, 'LSR', 'ZP,X', 2, 6),
    0x58: buildInstruction(0x58, 'CLI', 'Implied', 1, 2),
    0x59: buildInstruction(0x59, 'EOR', 'ABS,Y', 3, 4, true),
    0x5d: buildInstruction(0x5d, 'EOR', 'ABS,X', 3, 4, true),
    0x5e: buildInstruction(0x5e, 'LSR', 'ABS,X', 3, 7),
    0x60: buildInstruction(0x60, 'RTS', 'Implied', 1, 6),
    0x61: buildInstruction(0x61, 'ADC', '(IND,X)', 2, 6),
    0x65: buildInstruction(0x65, 'ADC', 'ZP', 2, 3),
    0x66: buildInstruction(0x66, 'ROR', 'ZP', 2, 5),
    0x68: buildInstruction(0x68, 'PLA', 'Implied', 1, 4),
    0x69: buildInstruction(0x69, 'ADC', 'IMM', 2, 2),
    0x6a: buildInstruction(0x6a, 'ROR', 'Accum', 1, 2),
    0x6c: buildInstruction(0x6c, 'JMP', 'Indirect', 3, 5),
    0x6d: buildInstruction(0x6d, 'ADC', 'ABS', 3, 4),
    0x6e: buildInstruction(0x6e, 'ROR', 'ABS', 3, 6),
    0x70: buildInstruction(0x70, 'BVS', 'Relative', 2, 2),
    0x71: buildInstruction(0x71, 'ADC', '(IND),Y', 2, 5, true),
    0x75: buildInstruction(0x75, 'ADC', 'ZP,X', 2, 4),
    0x76: buildInstruction(0x76, 'ROR', 'ZP,X', 2, 6),
    0x78: buildInstruction(0x78, 'SEI', 'Implied', 1, 2),
    0x79: buildInstruction(0x79, 'ADC', 'ABS,Y', 3, 4, true),
    0x7d: buildInstruction(0x7d, 'ADC', 'ABS,X', 3, 4, true),
    0x7e: buildInstruction(0x7e, 'ROR', 'ABS,X', 3, 7),
    0x81: buildInstruction(0x81, 'STA', '(IND,X)', 2, 6),
    0x84: buildInstruction(0x84, 'STY', 'ZP', 2, 3),
    0x85: buildInstruction(0x85, 'STA', 'ZP', 2, 3),
    0x86: buildInstruction(0x86, 'STX', 'ZP', 2, 3),
    0x88: buildInstruction(0x88, 'DEY', 'Implied', 1, 2),
    0x8a: buildInstruction(0x8a, 'TXA', 'Implied', 1, 2),
    0x8c: buildInstruction(0x8c, 'STY', 'ABS', 3, 4),
    0x8d: buildInstruction(0x8d, 'STA', 'ABS', 3, 4),
    0x8e: buildInstruction(0x8e, 'STX', 'ABS', 3, 4),
    0x90: buildInstruction(0x90, 'BCC', 'Relative', 2, 2),
    0x91: buildInstruction(0x91, 'STA', '(IND),Y', 2, 6),
    0x94: buildInstruction(0x94, 'STY', 'ZP,X', 2, 4),
    0x95: buildInstruction(0x95, 'STA', 'ZP,X', 2, 4),
    0x96: buildInstruction(0x96, 'STX', 'ZP,Y', 2, 4),
    0x98: buildInstruction(0x98, 'TYA', 'Implied', 1, 2),
    0x99: buildInstruction(0x99, 'STA', 'ABS,Y', 3, 5),
    0x9a: buildInstruction(0x9a, 'TXS', 'Implied', 1, 2),
    0x9d: buildInstruction(0x9d, 'STA', 'ABS,X', 3, 5),
    0xa0: buildInstruction(0xa0, 'LDY', 'IMM', 2, 2),
    0xa1: buildInstruction(0xa1, 'LDA', '(IND,X)', 2, 6),
    0xa2: buildInstruction(0xa2, 'LDX', 'IMM', 2, 2),
    0xa4: buildInstruction(0xa4, 'LDY', 'ZP', 2, 3),
    0xa5: buildInstruction(0xa5, 'LDA', 'ZP', 2, 3),
    0xa6: buildInstruction(0xa6, 'LDX', 'ZP', 2, 3),
    0xa8: buildInstruction(0xa8, 'TAY', 'Implied', 1, 2),
    0xa9: buildInstruction(0xa9, 'LDA', 'IMM', 2, 2),
    0xaa: buildInstruction(0xaa, 'TAX', 'Implied', 1, 2),
    0xac: buildInstruction(0xac, 'LDY', 'ABS', 3, 4),
    0xad: buildInstruction(0xad, 'LDA', 'ABS', 3, 4),
    0xae: buildInstruction(0xae, 'LDX', 'ABS', 3, 4),
    0xb0: buildInstruction(0xb0, 'BCS', 'Relative', 2, 2),
    0xb1: buildInstruction(0xb1, 'LDA', '(IND),Y', 2, 6),
    // 0xb2: buildInstruction(0xb2, 'LDA', '(IND)', 2, 5), - not supported by vanilla 6502
    0xb4: buildInstruction(0xb4, 'LDY', 'ZP,X', 2, 4),
    0xb5: buildInstruction(0xb5, 'LDA', 'ZP,X', 2, 4),
    0xb6: buildInstruction(0xb6, 'LDX', 'ZP,Y', 2, 4),
    0xb8: buildInstruction(0xb8, 'CLV', 'Implied', 1, 2),
    0xb9: buildInstruction(0xb9, 'LDA', 'ABS,Y', 3, 4, true),
    0xba: buildInstruction(0xba, 'TSX', 'Implied', 1, 2),
    0xbc: buildInstruction(0xbc, 'LDY', 'ABS,X', 3, 4, true),
    0xbd: buildInstruction(0xbd, 'LDA', 'ABS,X', 3, 4, true),
    0xbe: buildInstruction(0xbd, 'LDX', 'ABS,Y', 3, 4, true),
    0xc0: buildInstruction(0xc0, 'CPY', 'IMM', 2, 2),
    0xc1: buildInstruction(0xc1, 'CMP', '(IND,X)', 2, 6),
    0xc4: buildInstruction(0xc4, 'CPY', 'ZP', 2, 3),
    0xc5: buildInstruction(0xc5, 'CMP', 'ZP', 2, 3),
    0xc6: buildInstruction(0xc6, 'DEC', 'ZP', 2, 5),
    0xc8: buildInstruction(0xc8, 'INY', 'Implied', 1, 2),
    0xc9: buildInstruction(0xc9, 'CMP', 'IMM', 2, 2),
    0xca: buildInstruction(0xca, 'DEX', 'Implied', 1, 2),
    0xcc: buildInstruction(0xcc, 'CPY', 'ABS', 3, 4),
    0xcd: buildInstruction(0xcd, 'CMP', 'ABS', 3, 4),
    0xce: buildInstruction(0xce, 'DEC', 'ABS', 3, 6),
    0xd0: buildInstruction(0xd0, 'BNE', 'Relative', 2, 2),
    0xd1: buildInstruction(0xd1, 'CMP', '(IND),Y', 2, 5, true),
    0xd5: buildInstruction(0xd5, 'CMP', 'ZP,X', 2, 4),
    0xd6: buildInstruction(0xd6, 'DEC', 'ZP,X', 2, 6),
    0xd8: buildInstruction(0xd8, 'CLD', 'Implied', 1, 2),
    0xd9: buildInstruction(0xd9, 'CMP', 'ABS,Y', 3, 4, true),
    0xdd: buildInstruction(0xdd, 'CMP', 'ABS,X', 3, 4, true),
    0xde: buildInstruction(0xde, 'DEC', 'ABS,X', 3, 7),
    0xe0: buildInstruction(0xe0, 'CPX', 'IMM', 2, 2),
    0xe1: buildInstruction(0xe1, 'SBC', '(IND,X)', 2, 6),
    0xe4: buildInstruction(0xe4, 'CPX', 'ZP', 2, 3),
    0xe5: buildInstruction(0xe5, 'SBC', 'ZP', 2, 3),
    0xe6: buildInstruction(0xe6, 'INC', 'ZP', 2, 5),
    0xe8: buildInstruction(0xe8, 'INX', 'Implied', 1, 2),
    0xe9: buildInstruction(0xe9, 'SBC', 'IMM', 2, 2),
    0xea: buildInstruction(0xea, 'NOP', 'Implied', 1, 2),
    0xec: buildInstruction(0xec, 'CPX', 'ABS', 3, 4),
    0xed: buildInstruction(0xed, 'SBC', 'ABS', 3, 4),
    0xee: buildInstruction(0xee, 'INC', 'ABS', 3, 6),
    0xf0: buildInstruction(0xf0, 'BEQ', 'Relative', 2, 2),
    0xf1: buildInstruction(0xf1, 'SBC', '(IND),Y', 2, 5, true),
    0xf5: buildInstruction(0xf5, 'SBC', 'ZP,X', 2, 4),
    0xf6: buildInstruction(0xf6, 'INC', 'ZP,X', 2, 6),
    0xf8: buildInstruction(0xf8, 'SED', 'Implied', 1, 2),
    0xf9: buildInstruction(0xf9, 'SBC', 'ABS,Y', 3, 4, true),
    0xfd: buildInstruction(0xfd, 'SBC', 'ABS,X', 3, 4, true),
    0xfe: buildInstruction(0xfe, 'INC', 'ABS,X', 3, 7)
}

export const getInstructionTable = () => INSTRUCTION_TABLE
